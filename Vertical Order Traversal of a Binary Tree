//https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/

bool comp ( pair < int , int > p1 , pair < int , int > p2 )
{
       if ( p1.second > p2.second )
            return 1 ; 
      else if ( p1.second < p2.second )
            return 0 ; 
      else 
      {
          if ( p1.first < p2.first )
                return 1 ; 
         else 
                return 0 ; 
      }
}

class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        
        
        vector < pair  < int , int  >   > v1 [ 10001 ], v2 [ 10001 ] ;
        
        queue < pair< TreeNode * , pair < int , int >  > > q ; 
        q.push ( { root , { 0 , 0 }  } ) ; 
        int maxi = INT_MIN , mini =  INT_MAX ;
        vector < vector < int > > ans ; 
        while ( !q.empty() )
        {
            pair < TreeNode * , pair < int , int >  > p = q.front() ; 
            q.pop() ; 
            if ( p.second .first < 0 )
            {
                    v1[ abs ( p.second .first ) ].push_back ( { p.first -> val , p.second.second  - 1 }  ) ; 
                    mini = min ( mini , p.second .first ) ;
                
            }
            
            else 
            {
                    v2[ p.second.first  ].push_back ( { p.first -> val ,  p.second.second -1 }  ) ; 
                    maxi = max ( maxi , p.second.first  ) ; 
            }
            
            if ( p.first -> left )
                    q.push ( { p.first -> left , { p.second.first  - 1 , p.second .second -1  } }   ) ; 
            
            if ( p.first -> right )
                    q.push ( { p.first -> right , { p.second.first  + 1  , p.second.second - 1 } }  ) ;
        }
        //cout << mini << " " << maxi << endl ; 
        
        for ( int i = mini  ; i < 0 ; i ++)
        {
                sort ( v1 [ abs ( i )] .begin() , v1[ abs ( i ) ].end() , comp ) ; 
                vector < int > essehi ; 
            for ( int j = 0 ; j < v1[ abs ( i ) ] .size() ; j ++ )
                    essehi.push_back ( v1 [ abs ( i ) ] [ j ].first ) ; 
                if ( v1[ abs ( i )  ].size() )
                        ans.push_back ( essehi ) ; 
        }
        
        for ( int i = 0 ;i <= maxi ; i ++ )
        {
            sort ( v2[ abs ( i ) ].begin() , v2[ abs  ( i ) ].end() , comp ) ; 
            vector < int > essehi ; 
            for ( int j = 0 ; j < v2 [ abs  ( i ) ] .size() ; j ++ )
                    essehi.push_back ( v2 [ abs ( i ) ] [ j ].first ) ; 
             if ( v2[ i ].size() )
                    ans.push_back ( essehi ) ; 
        }
        
        return ans ; 
        
    }
};
