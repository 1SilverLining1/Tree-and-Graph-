//https://leetcode.com/problems/longest-consecutive-sequence/

class Solution {
public:
    
    
    
    map < int , vector < int > > v ; 
    map < int , int > visit ; 
    void dfs ( int x , int & c )
    {
        if ( visit [ x ] )
                return ; 
        c++ ; 
        visit [ x ] = 1 ;
        for ( auto i : v [ x ] )
                dfs ( i , c ) ; 
    }
    
    int longestConsecutive(vector<int>& arr) {
        
       
        int n = arr.size() ; 
        set < int > s ; 
        int ans = 0 ; 
        for ( int i = 0 ; i < n ; i ++ )
        {
            int x = arr [ i ] ; 
            if ( s.find ( x - 1 ) != s.end() )
            {
                v [ x - 1] .push_back ( x ) ; 
                v [ x ] .push_back ( x - 1 ) ; 
            }
            if ( s.find ( x + 1 ) != s.end () )
            {
                v [ x + 1 ].push_back ( x ) ;
                v [ x ] .push_back ( x + 1 ) ;
            }
                
            s.insert ( x ) ;
        }
        
        
        for ( int i = 0 ; i < n ; i ++ )
        {
            int x = arr [ i ] ,c = 0 ; ; 
            if ( ! visit  [ x ]  )
                dfs ( x , c ) ; 
            ans = max ( ans , c ) ; 
        }
        
        return ans ; 
        
    }
};
