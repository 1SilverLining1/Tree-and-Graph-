//https://practice.geeksforgeeks.org/problems/biconnected-graph/0

#include <bits/stdc++.h>
using namespace std;
bool visit [ 101 ] ; 
int parent [ 101 ] ; 
int low [ 101 ] ; 
int disc [ 101 ] ; 
int tt , n , flag ; 
vector < int > v [ 101 ] ; 
void dfs (int x )
{
    if ( flag == 0 ) 
        return ; 
    visit [ x ] = 1 ; 
    low [ x ] = disc [ x ] = ++tt ; 
    int c = 0 ; 
    for ( auto y : v [ x ] )
    {
        if ( y == parent [ x ] )
            continue ; 
        else if ( visit [ y ] )
            low [ x ] = min ( low [ x ] , low [ y ] ); 
        else 
        {
            parent[ y  ] = x ; 
            dfs ( y ) ; 
            low [ x ] = min ( low [ x ] , low [ y ] ); 
            if ( low [ y ] >= disc [ x ] and parent [ x ] != -1 )
            {
                flag = 0 ; 
                return ; 
            }
            c++ ; 
        }
    }
    
    if ( parent [ x ] == -1 and c > 1 )
        flag = 0 ; 
    
   
}

int main() {
    
    
    int t ; 
    cin >> t ; 
    while ( t-- )
    {
        int  m ; 
        cin >> n >> m ; 
        for ( int i = 0 ; i < 101 ; i ++  )
            v[ i ].clear() ;
        
        for ( int i = 0 ; i < m ; i ++ )
        {
            int x , y ; 
            cin >> x >> y ; 
            v [ x ] .push_back( y ) ; 
            v [ y ]. push_back ( x ) ;
        }
        
       
        tt = 0 ;
        flag = 1 ; 
        for ( int i = 0 ; i < n ; i ++ )
        {
            visit [ i ] = 0 ; 
            parent [ i ] = -1 ; 
            low [ i ] = disc [ i ] = 0 ; 
        }
        dfs ( 0 ) ; 
        for ( int i = 0 ; i < n ; i ++ )
        {
            if ( !visit [ i ] )
                flag = 0 ; 
        }
        cout << flag << endl;
    }
	//code
	return 0;
}
