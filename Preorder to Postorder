//https://practice.geeksforgeeks.org/problems/preorder-to-postorder/0


using namespace std ;
struct Node 
{
    int data ; 
    Node * left = NULL , *right = NULL ; 
    Node ( int data )
    {
        this-> data = data ;
    }
};

int bs ( int inorder[]  , int low  , int high , int x )
{
    while ( low <= high )
    {
        int mid = ( low + high ) / 2 ; 
        if ( inorder [ mid ] == x )
            return mid ; 
        else if ( inorder [ mid ] > x )
            high = mid - 1 ; 
        else 
            low = mid + 1 ; 
    
    }
    return -1 ; 
}
Node * construct ( int start  , int inorderstart , int inorderend , int inorder[] , int preorder[] , int n )
{
    

    if ( inorderend <inorderstart )
        return NULL ; 
    
    int pos = -1 , newstart ; 
    for ( int i = start ; i < n ; i ++ )
    {
        pos = bs ( inorder , inorderstart , inorderend , preorder [ i ] ) ; 
        if ( pos != -1 )
        {
                newstart = i ;         
                break ;
        }
    }
    
    if ( pos == -1 )
        return  NULL ; 
    else 
    {
        Node * temp = new Node ( preorder [ newstart ] ) ; 
        temp -> left = construct ( newstart + 1 , inorderstart , pos - 1 , inorder ,  preorder,  n)  ; 
        temp -> right = construct ( newstart + 1 , pos + 1 , inorderend , inorder ,  preorder,  n ) ; 
        return temp ; 
    }
   
}
void postorder ( Node * head )
{
    if ( head == NULL )
        return ; 
    
    postorder ( head -> left ) ; 
    postorder ( head -> right ) ; 
    cout << head -> data << " "; 
}
int main()
{
    int T ; 
    cin >> T ; 
    while ( T-- )
    {
        int n ; 
        cin >> n ; 
        int preorder [ n ] , inorder [ n ] ; 
        for ( int i = 0 ; i < n ; i ++ )
        {
            cin >> preorder [ i ] ; 
            inorder [ i ] = preorder [ i ] ; 
        }
        sort ( inorder , inorder + n ) ; 
        Node * head = construct ( 0 , 0  , n - 1 ,  inorder , preorder , n ) ; 
        postorder ( head ) ; 
        cout << endl ; 
    }
    
}
