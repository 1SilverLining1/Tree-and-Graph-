//https://leetcode.com/problems/course-schedule-ii/


class Solution {
public:
    
    vector < int >  v [ 100005 ] ;
    int visit [ 100005 ] ; 
    stack < int > stk ; 
    bool findloop ( int x  )
    {
       
       if ( visit [ x ] == 1 )
                return 1 ; 
        if ( visit [ x ] == 2 )
            return 0 ; 
        
        visit [ x ] = 1 ; 
        bool ans = 0 ; 
        for ( auto i : v [ x ] )
        {
            if (  findloop ( i  ) )
            {
                ans = 1 ;
                break ; 
            }
        }
            
        visit [ x ] = 2 ;
        return ans  ; 
    }
    bool canFinish(int n, vector<vector<int>>& p) {
        
      
        for ( int i = 0 ; i < n ; i ++ )
            if ( !visit [ i ] and findloop ( i ) )
                 return 0 ; 
        return 1 ; 
    }
    
    void   util  ( int x  )
    {
            
           if ( visit [ x ] )
                return ; 
          visit [ x ] = 1 ; 
           for ( auto i : v [ x ] )
                util ( i ) ; 
         stk.push ( x ) ;
    }
    
    vector<int> findOrder(int n, vector<vector<int>>& p) {
        
        
         
        for ( int i = 0 ; i < p.size() ; i ++ )
        {
             int x = p [ i ] [ 0 ] ; 
             int y = p [ i ] [ 1 ] ; 
             v[ y ].push_back ( x ) ; 
        }
        
        vector < int > ans ; 
        if ( !canFinish ( n , p ) )
                return ans ; 
        
        memset (visit , 0 , sizeof ( visit ) ) ;
        for ( int i = 0 ; i < n ; i ++ )
            if ( !visit [ i ]  )
                util (  i ) ;  
       
        while ( !stk.empty() )
        {
            ans.push_back ( stk.top() ) ; 
            stk.pop() ; 
        }
            
        return ans ; 
        
        
    }
};
