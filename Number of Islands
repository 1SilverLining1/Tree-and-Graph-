//https://leetcode.com/problems/surrounded-regions/

class Solution {
public:
    
    
     int n , m ; 
     bool visit [ 1001 ] [ 1001 ] ;
     vector<vector<char>> g  ;
    void dfs ( int x , int y )
    {
        if (  x < 0 or y < 0 or x >= n or y >= m or visit [ x ][ y ] or g [ x ] [ y ] =='0' )
                return ; 
        visit [ x ][ y ] = 1 ; 
        dfs ( x + 1 , y ) ; 
        dfs ( x - 1 , y ) ; 
        dfs ( x , y - 1 ) ; 
        dfs ( x , y + 1 ) ; 
    }
    int numIslands(vector<vector<char>>& grid) {
        
         n = grid .size() ; 
        if ( n == 0 )
                return 0 ; 
         m = grid [ 0 ] .size() ; 
         int ans = 0 ; 
         memset ( visit , 0 , sizeof ( visit ) ) ; 
         g = grid ; 
        for ( int i = 0 ; i < n ; i ++ )
        {
            for ( int j = 0 ; j < m ; j ++ )
            {
                
                if ( !visit [ i ] [ j ] and grid [ i ] [ j ] == '1')
                {
                    ans ++ ; 
                    dfs ( i , j ) ; 
                }
            }
        }
        
        
        return ans ; 
        
        
    }
};
