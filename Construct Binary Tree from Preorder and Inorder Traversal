//https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/


class Solution {
public:
    
    TreeNode * util( int &index , int start , int end , vector<int>& preorder, vector<int>& inorder , int n ) 
    {
        if ( start > end or index >= n  )
            return NULL ; 
        
        TreeNode * node = new TreeNode ( preorder [ index ] ) ;
        int pos ; 
        for ( int i = start ; i <= end ; i ++ )
        {
            if ( inorder [ i ] == preorder [ index ] )
            {
                pos = i ; 
                break ; 
            }
        }
        index ++ ; 
        node -> left = util ( index , start , pos - 1 , preorder , inorder , n  ) ; 
        node -> right = util ( index , pos + 1 , end , preorder , inorder , n ) ; 
        return node ; 
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        
        int n = preorder.size() ; 
        int index = 0; 
        return util( index  , 0 , n -1 , preorder , inorder , n ) ; 
        
    }
};
