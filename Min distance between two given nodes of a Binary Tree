//https://practice.geeksforgeeks.org/problems/min-distance-between-two-given-nodes-of-a-binary-tree/1
struct Node
{
	int data;
	struct Node *left;
	struct Node *right;
	
	Node(int x){
	    data = x;
	    left = NULL;
	    right = NULL;
	}
};

int findDist(Node* ,int ,int );


/* Driver program to test size function*/
int main()
{
  int t;
  struct Node *child;
  scanf("%d\n", &t);
  while (t--)
  {
     map<int, Node*> m;
     int n;
     scanf("%d\n",&n);
     struct Node *root = NULL;
     if(n==1)
     {
        int a;
        cin>>a;
        cout<<a<<endl;
     }else{
     while (n--)
     {
        Node *parent;
        char lr;
        int n1, n2;
        scanf("%d %d %c", &n1, &n2, &lr);
      //  cout << n1 << " " << n2 << " " << (char)lr << endl;
        if (m.find(n1) == m.end())
        {
           parent = new Node(n1);
           m[n1] = parent;
           if (root == NULL)
             root = parent;
        }
        else
           parent = m[n1];

        child = new Node(n2);
        if (lr == 'L')
          parent->left = child;
        else
          parent->right = child;
        m[n2]  = child;
     }
     int a,b;
     cin>>a>>b;

     cout<<findDist(root,a,b)<<endl;

  }
  }
  return 0;
}
/*This is a function problem.You only need to complete the function given below*/
/* A binary tree node
struct Node
{
    int data;
    Node* left, * right;
}; */
/* Should return minimum distance between a and b 
   in a tree with given root*/
Node * lca(Node* root ,int n1 ,int n2 )
{
    
    if ( root == NULL )
        return NULL ; 
        
    if ( root -> data == n1 or root -> data == n2 )
        return root ;
    Node * left = lca ( root -> left , n1 , n2 ) ; 
    Node * right = lca ( root -> right , n1 , n2 ) ; 
    if ( left != NULL and right != NULL  )
        return root ;
    else if  ( left != NULL ) 
        return left  ;
    else 
        return right  ; 
}
int  finddist ( Node * root , int a )
{
    
    if ( root == NULL )
        return 1e5 ; 
    if ( root -> data == a )
        return 0 ; 
    int dist1 = finddist ( root -> left , a ) + 1 ; 
    int dist2 = finddist ( root -> right , a  ) + 1 ; 
    //cout << root -> data  << " " << dist1 << " " << dist2 << " " << "*****" << endl ; 
    return min ( dist1 , dist2 ) ; 
}


int findDist(Node* root, int a, int b)
{
   Node * LeastCommonAncestor = lca ( root , a , b ) ; 
   //cout <<  LeastCommonAncestor -> data << endl ; 
   int dist1 = finddist (   LeastCommonAncestor   , a ) ;
  // cout << "------------------" << endl ; 
   int dist2 = finddist (   LeastCommonAncestor   , b ) ;
   //cout << endl ; 
   //cout << dist1 << " " << dist2 << endl ; 
   return dist1 + dist2 ; 

}
