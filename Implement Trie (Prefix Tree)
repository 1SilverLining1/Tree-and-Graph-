//https://leetcode.com/problems/implement-trie-prefix-tree/

struct Node 
{
    bool val ; 
    Node * children [ 26 ] ; 
    Node ()
    {
            val = false ; 
            memset ( children , NULL , sizeof ( children) ) ; 
    }
};


class Trie {
public:
    /** Initialize your data structure here. */
    
    
    Node * root ; 
    Trie() {
        
        root = new Node() ; 
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        
        Node * temp = root ;
        
        for ( int i = 0 ; i < word.length() ; i ++ )
        {
            if ( temp -> children [ word [ i ] - 'a' ]== NULL  )
            {
                Node * node = new Node() ; 
                temp -> children [ word [ i ] - 'a' ] = node ; 
            }
            temp = temp -> children [ word [ i ] - 'a' ] ; 
        }
        temp -> val = 1 ; 
        
    }
    
    
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        
        Node * temp = root ;
        for ( int i = 0 ; i < word.length() ; i ++ )
        {
            if ( temp -> children [ word [ i ] - 'a' ]== NULL  )
                    return 0 ; 
            temp = temp -> children [ word [ i ] - 'a' ] ; 
        }
        return temp -> val  ; 
        
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        
        Node * temp = root ;
        for ( int i = 0 ; i < prefix.length() ; i ++ )
        {
            if ( temp -> children [ prefix [ i ] - 'a' ]== NULL  )
                    return 0 ; 
            temp = temp -> children [ prefix [ i ] - 'a' ] ; 
        }
        return 1 ;
        
        
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */

