//https://leetcode.com/problems/longest-univalue-path/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    
    
    
    int util ( TreeNode * root , int  &ans )
    {
        if ( !root )
                return 0; 
        
        
        int left = util ( root -> left , ans ) ; 
        int right = util ( root -> right , ans ) ; 
        
        int maxi = 1 ; 
        
        if ( root -> left and root -> left -> val == root -> val )
                maxi = max ( maxi , left + 1 ) ; 
        
        if ( root -> right and root -> right -> val == root -> val )
                maxi = max ( maxi , right + 1 ) ; 
        
        
        ans = max ( ans , maxi ) ; 
        if ( root -> left and root -> right and root -> left -> val == root -> right -> val and root -> left -> val == root ->  val )
                ans = max ( ans ,  1 + left + right ) ; 
        
        return maxi ; 
        
        
    }
    int longestUnivaluePath(TreeNode* root) {
        
        
        if ( !root )
                return 0 ; 
        int ans = 0 ; 
        
        util ( root , ans ) ; 
        
        return ans - 1 ; 
        
        
    }
};
