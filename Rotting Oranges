//https://leetcode.com/problems/rotting-oranges/


class Solution {
public:
    int orangesRotting(vector<vector<int>>& v) {
        
        
        
        queue < pair < int , int > > q ; 
        int n = v.size() ; 
        if ( n == 0 ) 
                return 0 ; 
        int m = v [ 0 ].size() ; 
        if ( m == 0 )
                return 0 ; 
        bool visit [ n ] [ m ] ; 
       
        for ( int i = 0 ; i < n ; i ++ )
        {
            for ( int j = 0 ; j < m  ; j ++ )
            {
                visit [ i ] [ j ] = 0 ; 
                if ( v [ i ] [ j ] == 2 )
                {
                    q.push ( { i , j } ) ; 
                    visit [ i ] [ j ] = 1 ; 
                }
            }
        }
        int ans = 0 ; 
        while ( !q.empty() )
        {
            int u = q.size() ; 
            
            for ( int i = 0 ; i < u ; i ++ )
            {
                pair < int , int > p = q.front() ; 
                q.pop() ;
                
                int x = p.first ; 
                int y = p.second ; 
                v [ x ] [ y ] = 2 ; 
                
                if ( x - 1 >= 0  and !visit [ x- 1] [ y ] and v [ x- 1] [ y ] == 1 )
                {
                   
                    q.push ( { x - 1 , y } ) ; 
                    visit [ x- 1] [ y ] = 1 ; 
                }
                
                if ( x + 1 < n  and !visit [ x + 1 ] [ y ]  and v [ x + 1 ] [ y ] == 1 )
                {
                    
                    q.push ( { x +  1 , y } ) ; 
                    visit [ x + 1] [ y ] = 1 ; 
                }
                
                if ( y - 1 >= 0  and !visit [ x ] [ y - 1 ]  and v [ x ] [ y - 1 ] == 1 )
                {
                    
                    q.push ( { x  , y - 1 } ) ; 
                    visit [ x ] [ y - 1  ] = 1 ; 
                }
                
                if ( y + 1 < m   and !visit [ x ] [ y + 1  ]  and v [ x ] [ y + 1  ] == 1 )
                {
                   
                    q.push ( { x , y + 1 } ) ; 
                    visit [ x ] [ y + 1 ] = 1 ; 
                }
                
            }
            
            ans ++ ; 
        }
        
       
        
        for ( int i = 0 ; i < n ; i ++ )
        {
            for ( int j = 0 ; j < m ; j ++ )
            {
                if ( v [ i ] [ j ] == 1 )
                {
                    return  -1 ; 
                }
            }
        }
        //cout << "cool" << endl ; 
        ans = ans > 0 ? ans - 1 : 0 ; 
        return ans  ; 
        
    }
};
